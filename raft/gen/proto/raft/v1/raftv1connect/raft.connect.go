// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/raft/v1/raft.proto

package raftv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/twflem/dist-sys/raft/gen/proto/raft/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RaftName is the fully-qualified name of the Raft service.
	RaftName = "raft.v1.Raft"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RaftVoteProcedure is the fully-qualified name of the Raft's Vote RPC.
	RaftVoteProcedure = "/raft.v1.Raft/Vote"
	// RaftAppendEntryProcedure is the fully-qualified name of the Raft's AppendEntry RPC.
	RaftAppendEntryProcedure = "/raft.v1.Raft/AppendEntry"
)

// RaftClient is a client for the raft.v1.Raft service.
type RaftClient interface {
	Vote(context.Context, *connect_go.Request[v1.VoteRequest]) (*connect_go.Response[v1.VoteResponse], error)
	AppendEntry(context.Context, *connect_go.Request[v1.AppendEntryRequest]) (*connect_go.Response[v1.AppendEntryResponse], error)
}

// NewRaftClient constructs a client for the raft.v1.Raft service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRaftClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RaftClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &raftClient{
		vote: connect_go.NewClient[v1.VoteRequest, v1.VoteResponse](
			httpClient,
			baseURL+RaftVoteProcedure,
			opts...,
		),
		appendEntry: connect_go.NewClient[v1.AppendEntryRequest, v1.AppendEntryResponse](
			httpClient,
			baseURL+RaftAppendEntryProcedure,
			opts...,
		),
	}
}

// raftClient implements RaftClient.
type raftClient struct {
	vote        *connect_go.Client[v1.VoteRequest, v1.VoteResponse]
	appendEntry *connect_go.Client[v1.AppendEntryRequest, v1.AppendEntryResponse]
}

// Vote calls raft.v1.Raft.Vote.
func (c *raftClient) Vote(ctx context.Context, req *connect_go.Request[v1.VoteRequest]) (*connect_go.Response[v1.VoteResponse], error) {
	return c.vote.CallUnary(ctx, req)
}

// AppendEntry calls raft.v1.Raft.AppendEntry.
func (c *raftClient) AppendEntry(ctx context.Context, req *connect_go.Request[v1.AppendEntryRequest]) (*connect_go.Response[v1.AppendEntryResponse], error) {
	return c.appendEntry.CallUnary(ctx, req)
}

// RaftHandler is an implementation of the raft.v1.Raft service.
type RaftHandler interface {
	Vote(context.Context, *connect_go.Request[v1.VoteRequest]) (*connect_go.Response[v1.VoteResponse], error)
	AppendEntry(context.Context, *connect_go.Request[v1.AppendEntryRequest]) (*connect_go.Response[v1.AppendEntryResponse], error)
}

// NewRaftHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRaftHandler(svc RaftHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(RaftVoteProcedure, connect_go.NewUnaryHandler(
		RaftVoteProcedure,
		svc.Vote,
		opts...,
	))
	mux.Handle(RaftAppendEntryProcedure, connect_go.NewUnaryHandler(
		RaftAppendEntryProcedure,
		svc.AppendEntry,
		opts...,
	))
	return "/raft.v1.Raft/", mux
}

// UnimplementedRaftHandler returns CodeUnimplemented from all methods.
type UnimplementedRaftHandler struct{}

func (UnimplementedRaftHandler) Vote(context.Context, *connect_go.Request[v1.VoteRequest]) (*connect_go.Response[v1.VoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.Raft.Vote is not implemented"))
}

func (UnimplementedRaftHandler) AppendEntry(context.Context, *connect_go.Request[v1.AppendEntryRequest]) (*connect_go.Response[v1.AppendEntryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raft.v1.Raft.AppendEntry is not implemented"))
}
